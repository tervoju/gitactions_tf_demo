name: 'Dev - Solution Azure Terraform Plan/Apply'

on:
  push:
    branches:
      - dev
    paths:
      - 'IaC/terraform/dev/**'
      - '.github/workflows/dev_iac.yml'
  workflow_dispatch:

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TERRAFORM_WORKING_DIRECTORY: "IaC/terraform/dev"
  ENVIRONMENT_NAME: "dev"
  ARM_CLIENT_ID: "${{ secrets.AZURE_DEV_CLIENT_ID }}"               #  service principal app id
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_DEV_SUBSCRIPTION_ID }}"   # subscription id
  ARM_TENANT_ID: "${{ secrets.AZURE_DEV_TENANT_ID }}"                   # tenant id
  ARM_ACCESS_KEY: "${{ secrets.TF_ACCESS_KEY }}"                    # this is the access key to container of the tfstate
  CLIENT_ID: "${{ secrets.CLIENT_ID }}"  
  CLIENT_PASSWORD: "${{ secrets.CLIENT_PASSWORD }}" 
  RESOURCE_GROUP_NAME: $AZURE_DEV_RESOURCE_GROUP_NAME

jobs:
  # infra for the solution 
  terraform-init:
      name: 'Terraform Init & plan'
      runs-on: ubuntu-latest
      env:
        #this is needed since we are running terraform with read-only permissions
        ARM_SKIP_PROVIDER_REGISTRATION: true
      outputs:
        tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
  
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
  
      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: | 
          terraform init -upgrade

      # Validate terraform files
      - name: Terraform Validate
        run: terraform validate
  
      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check
    
      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -var="client_id_value=${{ secrets.CLIENT_ID }}" -var="client_secret_value=${{ secrets.CLIENT_PASSWORD }}" -var="tenant_id=${{ secrets.AZURE_DEV_TENANT_ID }}" -var="sp_client_id=${{ secrets.AZURE_DEV_CLIENT_ID }}" -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
          
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_WORKING_DIRECTORY }}/tfplan
          
      # Create string output of Terraform Plan
      - name: Create String Output
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
      # Publish Terraform Plan as task summary
      #- name: Publish Terraform Plan to Task Summary
      #  env:
      #    SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      #  run: |
      #    echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      #  
      # If this is a PR post the changes
      #- name: Push Terraform Output to PR
      #  if: github.ref != 'refs/heads/main'
      #  uses: actions/github-script@v6
      #  env:
      #    SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      #  with:
      #      github-token: ${{ secrets.GITHUB_TOKEN }}
      #      script: |
      #        const body = `${process.env.SUMMARY}`;
      #        github.rest.issues.createComment({
      #            issue_number: context.issue.number,
      #            owner: context.repo.owner,
      #            repo: context.repo.repo,
      #            body: body
      #        })
              
  terraform-apply:
      name: 'Terraform Apply'
      if: github.ref == 'refs/heads/dev' && needs.terraform-plan.outputs.tfplanExitCode == 2

      runs-on: ubuntu-latest
      needs: [terraform-init]
      
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
  
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }} 
        run: |
          terraform init -upgrade
  
      # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name:  tfplan

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          tenant-id: ${{ env.ARM_TENANT_ID }}
          client-id: ${{ env.ARM_CLIENT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
  
      # Terraform Apply - with lock file in .terraform folder
      # copy the .terraform.lock.hcl and .terraform folder to the root directory
      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }} 
        run: |
          mv .terraform.lock.hcl ../../../.terraform.lock.hcl
          cp -R .terraform ../../../.terraform
          cd ../../../
          echo ${{ secrets.CLIENT_PASSWORD }}
          terraform apply -auto-approve  tfplan
          